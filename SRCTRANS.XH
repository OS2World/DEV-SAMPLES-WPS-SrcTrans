
/*
 * This file was generated by the SOM Compiler.
 * FileName: srctrans.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */

/*
 * 
 *    Source render drag/drop sample
 * 
 *    Author : Andrew Clinch
 * 
 *    Disclaimer :
 *    In no event shall Andrew Clinch be liable for any damages whatsoever
 *    (including, without limitation, damaged or loss of business profits, business
 *    interruption, loss of business information, or other pecuniary loss) arising
 *    out of the use or inability to use this sample code, even if Andrew Clinch
 *    has been advised of the possibility of such damages.
 * 
 */

#ifndef srctrans_xh
#define srctrans_xh
class SrcTransient;

#define SrcTransient_MajorVersion 1
#define SrcTransient_MinorVersion 1

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wptrans_xh
#include "wptrans.xh"
#endif

#ifndef SrcTransient_API
#define SrcTransient_API
/*
 * The Class API
 */

/* A procedure to create the SrcTransient Class */
SOMEXTERN SOMClass * SOMLINK SrcTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the SrcTransient class object */
class M_SrcTransient;
#define _SrcTransient ((M_SrcTransient*)SrcTransientClassData.classObject)

/* The static interface to SrcTransient and its instances */
SOMEXTERN struct SrcTransientClassDataStructure {
	SOMClass *classObject;
} SrcTransientClassData;

/*
 * -- Typedefs for Procedures that support SrcTransient Methods
 */
extern "C" {
}


#endif /* SrcTransient_API */


/*
 * -- The C++ Wrapper Class for SrcTransient
 */
class SrcTransient : public WPTransient
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!SrcTransientClassData.classObject) 
      SrcTransientNewClass(SrcTransient_MajorVersion,SrcTransient_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(SrcTransientClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(SrcTransientClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}


};   /* SrcTransient */



#endif       /* srctrans_xh */

/*
 * This file was generated by the SOM Compiler.
 * FileName: srctrans.xh.
 * Generated using:
 *     SOM Precompiler spc: 1.22
 *     SOM Emitter emitxh: 1.11
 */
#ifndef srctrans_mxh
#define srctrans_mxh
class M_SrcTransient;

#define M_SrcTransient_MajorVersion 1
#define M_SrcTransient_MinorVersion 1

/* C++ som defs */
#include <somcls.xh>

/* C++ parent def */
#ifndef wptrans_xh
#include "wptrans.xh"
#endif

#ifndef M_SrcTransient_API
#define M_SrcTransient_API
/*
 * The Class API
 */

/* A procedure to create the M_SrcTransient Class */
SOMEXTERN SOMClass * SOMLINK M_SrcTransientNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* A macro to return the M_SrcTransient class object */
#define _M_SrcTransient ((SOMClass*)M_SrcTransientClassData.classObject)

/* The static interface to M_SrcTransient and its instances */
SOMEXTERN struct M_SrcTransientClassDataStructure {
	SOMClass *classObject;
	somMToken clsQueryModuleHandle;
} M_SrcTransientClassData;

/*
 * -- Typedefs for Procedures that support M_SrcTransient Methods
 */
extern "C" {
typedef HMODULE    (SOMLINK *somTD_M_SrcTransient_clsQueryModuleHandle)(M_SrcTransient *somSelf);
}


#endif /* M_SrcTransient_API */


/*
 * -- The C++ Wrapper Class for M_SrcTransient
 */
class M_SrcTransient : public M_WPTransient
{
public:

void *operator new(size_t size)
{
   (void) size;
   if (!M_SrcTransientClassData.classObject) 
      M_SrcTransientNewClass(M_SrcTransient_MajorVersion,M_SrcTransient_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somResolve(SOM_TestCls((SOMAny *)(M_SrcTransientClassData.classObject),
                             SOMClassClassData.classObject),
                 SOMClassClassData.somNew))
         ((SOMClass*)(M_SrcTransientClassData.classObject));
}

void operator delete(void * obj)
{
   ((SOMObject *)obj)->somFree();
}

/* public method: clsQueryModuleHandle */
HMODULE    clsQueryModuleHandle()
{
   return (HMODULE) SOM_Resolve((SOMAny *)this,M_SrcTransient,clsQueryModuleHandle)
	(this);
}



};   /* M_SrcTransient */



#endif       /* srctrans_mxh */
